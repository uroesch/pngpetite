#!/usr/bin/env bash

# -----------------------------------------------------------------------------
# A script based on Crunch by Christopher Simpkins adapted for command line
# junkies.
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
# Author:        Urs Roesch <github@bun.ch>
# License:       MIT
# Requires:      bc, pngquant, zopflipng
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
# Settings
# -----------------------------------------------------------------------------
set -o nounset
set -o errexit
set -o pipefail

# -----------------------------------------------------------------------------
# Globals
# -----------------------------------------------------------------------------

declare -r VERSION=0.3.2
declare -r SCRIPT=${0##*/}
declare -r SUFFIX="-${SCRIPT}.png"
declare -r S1_SUFFIX="-${RANDOM}"
declare -r S2_SUFFIX="-${RANDOM}"
declare -r PNGQUANT_OPTS="--quality=80-98 --skip-if-larger --force"
declare -r ZOPFLI_OPTS='-m -y --lossy_8bit --lossy_transparent'
declare -r STAT_OPTS='--printf %s'
declare -r COLUMN_WIDTH=13
declare -r LINE=$(eval printf -- "-%.0s" {1..${COLUMN_WIDTH}})
declare -g HEADER_PRINTED=false
declare -g REPLACE=false
declare -g QUIET=false
declare -g PRINT_STATS=true
declare -g DEST_DIR=""
declare -a FILES=()
declare -a FIELDS_HEADER=(
  "Original (KB)"
  "Stage1 (KB)"
  "Final (KB)"
  "Saved (KB)"
  "Saved %"
  "Time (sec)"
  "Image Name"
)
declare -a DEPENDENCIES=(
  pngquant
  zopflipng
  file
  bc
)

# -----------------------------------------------------------------------------
# Functions
# -----------------------------------------------------------------------------
function check_dependencies() {
  for dependency in ${DEPENDENCIES[*]}; do
    if ! which ${dependency} >/dev/null 2>&1; then
      echo "Missing dependency '${dependency}'" 1>&2
      echo "Please install first!" 1>&2
      exit 64
    fi
  done
}

# -----------------------------------------------------------------------------

function usage() {
  local exit_code=${1:-1}; shift
  cat << USAGE

  Usage:
    ${SCRIPT} <options> <png-image> ...

  Options:
    -h | --help         This message
    -r | --replace      Replace file with processed one
                        Implies -d
    -d | --dest <path>  Place images in given path
                        Implies -r
    -S | --no-stats     Don't print stats
    -q | --quiet        Don't print stats and progress
    -V | --version      Print version and exit

  Description:
    Insane(ly slow but wicked good) PNG image optimization
    Built with pngquant and zopflipng optimizers

USAGE
  exit ${exit_code}
}

# -----------------------------------------------------------------------------

function parse_options() {
  [[ $# -eq 0 ]] && usage 11
  while [[ ${#} -gt 0 ]]; do
    case ${1} in
    -r|--replace)  REPLACE=true;;
    -h|--help)     usage 0;;
    -d|--dest)     shift; DEST_DIR=${1};;
    -q|--quiet)    QUIET=true; PRINT_STATS=false;;
    -S|--no-stats) PRINT_STATS=false;;
    -V|--version)  print_version;;
    -*)            usage 12;;
    *)             FILES+=( "${1}" )
    esac
    shift
  done
}

# -----------------------------------------------------------------------------

function print_version() {
  cat << VERSION | sed 's/^  //g'
  ${SCRIPT} version ${VERSION} MIT License

  Copyright 2016 Christopher Simpkins //github.com/chrissimpkins/Crunch
  Copyright 2017-2020 Urs Roesch (Linux version) //github.com/uroesch/pngpetite
VERSION
  exit 0
}

# -----------------------------------------------------------------------------

function evaluate_opts() {
  if [[ ${REPLACE} == true && -n ${DEST_DIR} ]]; then
    usage 1
  else
    return 0
  fi
}

# -----------------------------------------------------------------------------

function check_pid() {
  local pid="${1}"
  ps -p ${pid} &>/dev/null
}

# -----------------------------------------------------------------------------

function spinner() {
  local image="${1}"; shift;
  local operation="${1}"; shift;
  local pid="${1}"; shift;
  while true; do
    for i in 'â€”' '\' '|' '/'; do
      check_pid "${pid}" || return 0
      [[ ${QUIET} == true ]] && sleep 1 && continue
      printf "Processing image '%s' -> %s  %s\n" \
        "${image}" \
        "${operation}" \
        "$i";
      sleep 1;
      printf '\033[A'
    done;
  done
}

# -----------------------------------------------------------------------------

function inside_docker() {
  [[ -f /.dockerenv ]]
}
# -----------------------------------------------------------------------------

function wait_for_file() {
  local file="${1}"
  inside_docker || return 0
  # On docker the file write is a bit lagging hence the loop
  while [[ ! -f ${file} ]]; do
    sleep 0.1
  done
}

# -----------------------------------------------------------------------------

function get_size() {
  local file="${1}"
  wait_for_file "${file}"
  stat ${STAT_OPTS} "${file}" 2>/dev/null || echo "N/A"
}

# -----------------------------------------------------------------------------

function calc_size() {
  local size="${1}"; shift;
  bc -l <<< "${size}/1024"
}

# -----------------------------------------------------------------------------

function run_pngquant() {
  local input="${1}"; shift;
  local output="${1}"; shift;
  ## pngquant will fail if the resulting png is not smaller
  ## in that case we just copy the file
  pngquant ${PNGQUANT_OPTS} --output "${output}" "${input}" >/dev/null ||
    cp "${image}" "${output}"
}


# -----------------------------------------------------------------------------

function run_zopflipng() {
  local input="${1}"; shift;
  local output="${input%${S1_SUFFIX}}${S2_SUFFIX}"
  zopflipng ${ZOPFLI_OPTS} "${input}" "${output}" >/dev/null &&
    rm "${input}"
}

# -----------------------------------------------------------------------------

function replace_file() {
  local original_file="${1}"; shift
  local crushed_file="${1}"; shift
  [[ ${REPLACE} == false ]] && return
  mv "${crushed_file}" "${original_file}"
}

# -----------------------------------------------------------------------------

function check_image_type() {
  local image="${1}"; shift;
  local status=true
  [[ $(file -- "${image}") =~ 'PNG image data' ]] && return 0
  echo "ALERT: Unable to Process File"
  echo "'${image}' does not appear to be a png file"
  return 1
}

# -----------------------------------------------------------------------------

function set_working_image() {
  local image="${1}"; shift;
  if [[ -n ${DEST_DIR} ]]; then
    echo "${DEST_DIR}/${image##*/}"
  else
    echo "${image%.*}${SUFFIX}"
  fi
}

# -----------------------------------------------------------------------------

function create_scaffold() {
  [[ -z ${DEST_DIR} ]] && return
  if [[ ! -d ${DEST_DIR} ]]; then
    if ! mkdir -p ${DEST_DIR} 2>/dev/null; then
      echo "Failed to create directory '${DEST_DIR}'!"
      echo "Giving up"
      exit 128
    fi
  else
    echo "Directory '${DEST_DIR}' already exists!"
    echo "Giving up"
    exit 129
  fi
}

# -----------------------------------------------------------------------------

function format() {
  local type=${1}; shift;
  local item=""
  case ${type} in
  header) item="%${COLUMN_WIDTH}s";;
  stats)  item="%${COLUMN_WIDTH}.3f";;
  esac
  for _i in "${FIELDS_HEADER[@]:1}"; do
    echo -n "${item} "
  done
  echo "%s\\n"
}

# -----------------------------------------------------------------------------

function print_header() {
  [[ ${HEADER_PRINTED} == true ]] && return
  printf "$(format header)" "${FIELDS_HEADER[@]}"
  printf "$(format header)" \
    $(for x in "${FIELDS_HEADER[@]}"; do echo "${LINE}"; done)
  HEADER_PRINTED=true
}

# -----------------------------------------------------------------------------

function print_stats() {
  [[ ${PRINT_STATS} == false ]] && return
  local image="$1"; shift;
  local pre_size="${1}"; shift;
  local stage1_size="${1}"; shift;
  local final_size="${1}"; shift
  local time="${1}"; shift
  local saved_size="$(bc -l <<< "${pre_size} - ${final_size}")"
  local saved_percent="$(bc -l <<< "100 * ${saved_size} / ${pre_size}")"
  print_header
  printf "$(format stats)" \
    "$(calc_size ${pre_size})" \
    "$(calc_size ${stage1_size})" \
    "$(calc_size ${final_size})" \
    "$(calc_size ${saved_size})" \
    "${saved_percent}" \
    "${time}" \
    "${image}"
}

# -----------------------------------------------------------------------------

function process_images() {
  local files=( "${@}" )
  for image in "${files[@]}"; do
    check_image_type "${image}" || continue

    working_image=$(set_working_image "${image}")
    # get the pre compression size of the image file
    pre_size=$(get_size "${image}")

    ## pngquant section
    start=$(date +%s.%N)
    run_pngquant "${image}" "${working_image}${S1_SUFFIX}" &
    spinner "${image}" "stage1: pngquant" $!
    stage1_size=$(get_size "${working_image}${S1_SUFFIX}")

    ## zopfli section
    run_zopflipng "${working_image}${S1_SUFFIX}" &
    spinner "${image}" "stage2: zopflipng" $!
    time=$(bc -l <<< "$(date +%s.%N) - ${start}")
    # get the post compression size of the image file
    final_size=$(get_size "${working_image}${S2_SUFFIX}")

    # put final image into place and change permission if inside docker
    mv "${working_image}${S2_SUFFIX}" "${working_image}"
    inside_docker && chown --reference="${image}" "${working_image}"

    print_stats "${image}" "${pre_size}" "${stage1_size}" \
      "${final_size}" "${time}"
    replace_file "${image}" "${working_image}"
  done
}

# -----------------------------------------------------------------------------
# Main
# -----------------------------------------------------------------------------
parse_options "${@}"
evaluate_opts
check_dependencies
create_scaffold
process_images "${FILES[@]}"
